@page "/course"
@using BlazorAppSolution.UI.Model
@using BlazorAppSolution.UI.Services
@inject CourseService CourseService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>Course</PageTitle>

<div class="course-container">
    <h1>Course</h1>

    <NavLink class="btn btn-primary mb-3" href="/course/create">Add New Course</NavLink>

    @if (courses == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (courses.Count == 0)
    {
        <p>No courses found.</p>
    }
    else
    {
        <div class="row">
            @foreach (var course in courses)
            {
                <div class="col-md-4 mb-4">
                    <div class="card course-card">
                        <img src="@course.ImageName" alt="@course.Name" class="card-img-top" />
                        <div class="card-body text-center">
                            <h5 class="card-title">@course.Name</h5>
                            <p class="card-text">Duration: @course.Duration</p>
                            <p class="card-text">@course.Description</p>
                            <p class="card-text">Category: @course.Category.Name</p>
                            <button class="btn btn-secondary me-2" @onclick="() => UpdateCourse(course.CourseId ?? 0)">Update</button>
                            <button class="btn btn-danger" @onclick="() => DeleteCourse(course.CourseId ?? 0)">Delete</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .course-container {
        background-color: #ffffff; /* White background for the container */
        color: #000000; /* Black text color */
        padding: 20px;
    }

    .course-card {
        background-color: #f8f9fa; /* Light gray background for cards */
        color: #000000; /* Black text color */
        border: 1px solid #ccc; /* Light border for cards */
        border-radius: 10px; /* Curved edges */
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1); /* Subtle shadow effect */
        transition: transform 0.2s; /* Smooth transition for hover effect */
    }

        .course-card:hover {
            transform: translateY(-2px); /* Slight lift on hover */
        }

        .course-card .btn-secondary {
            background-color: #007bff; /* Primary button color */
            color: #ffffff; /* White text */
        }

            .course-card .btn-secondary:hover {
                background-color: #0056b3; /* Darker shade on hover */
                color: #ffffff;
            }

        .course-card .btn-danger {
            background-color: #dc3545; /* Danger button color */
            color: #ffffff; /* White text */
        }

            .course-card .btn-danger:hover {
                background-color: #c82333; /* Darker shade on hover */
                color: #ffffff;
            }

    .text-center {
        text-align: center; /* Centering text */
    }
</style>

@code {
    private List<Course>? courses;

    protected override async Task OnInitializedAsync()
    {
        await LoadCourses();
    }

    private async Task LoadCourses()
    {
        try
        {
            courses = await CourseService.GetCoursesAsync();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"An error occurred while loading courses: {ex.Message}");
        }
    }

    private void UpdateCourse(int courseId)
    {
        Navigation.NavigateTo($"/course/edit/{courseId}");
    }

    private async Task DeleteCourse(int courseId)
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this course?");
        if (confirm)
        {
            try
            {
                await CourseService.DeleteCourseAsync(courseId);
                await LoadCourses(); // Refresh the course list after deletion
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"An error occurred while deleting the course: {ex.Message}");
            }
        }
    }
}
