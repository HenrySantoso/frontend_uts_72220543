@page "/category"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>Category</PageTitle>

<h1>Category</h1>

<NavLink class="btn btn-success mb-3" href="/category/create">Add New Category</NavLink>

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else if (categories.Length == 0)
{
    <p>No categories found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var category in categories)
            {
                <tr>
                    <td>@category.CategoryId</td>
                    <td>@category.Name</td>
                    <td>@category.Description</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => UpdateCategory(category.CategoryId)">Update</button>
                        <button class="btn btn-danger" @onclick="() => DeleteCategory(category.CategoryId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Category[]? categories;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await Http.GetFromJsonAsync<Category[]>("https://actualbackendapp.azurewebsites.net/api/v1/Categories");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"An error occurred while loading categories: {ex.Message}");
        }
    }

    private void UpdateCategory(int categoryId)
    {
        Navigation.NavigateTo($"/category/edit/{categoryId}");
    }

    private async Task DeleteCategory(int categoryId)
    {
        try
        {
            bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this category?");
            
            if (confirmed)
            {
                var response = await Http.DeleteAsync($"https://actualbackendapp.azurewebsites.net/api/v1/Categories/{categoryId}");

                if (response.IsSuccessStatusCode)
                {
                    await LoadCategories(); // Refresh the list after deletion
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Error deleting category.");
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
    }
}
